------------------------------------
Contracts:
    * ArrayList.h:
        This will allow us to store a list of transactions with an unknown number of elements. 

    * Block.h:
        This will allow us to compute a hash of a block. 

    * Blockchain.h:
        This will allow us to create a new block, perform proof of work, add a transaction, mine, validate if the proof 
        generated is correct.

------------------------------------
Data Structures
    * Block structure:
        As we previously mentioned, the blockchain consists of a series of connected blocks. Each block contains a list 
        of transactions and some additional information. To represent the block chain, we need a struct to represent each 
        block and a way to connect all these blocks together. 

    * Connecting the blocks in the chain:
        At first, I thought that we need to create an linkedlist to keep track of the ordering of the block. However, I might 
        be wrong. It might be possible to maintain a dynamic array of blocks and have each block store the hash of the previous 
        block. 

        This suggests that I might need to build an arraylist utility.