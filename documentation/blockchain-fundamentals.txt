Blockchain Programming Fundamentals:
    * Hashing:
        + Fundamentals of hashing:
            Hashing is a mathematical process that takes in parameters and uses them to generate an irreversible fixed length alphanumeric string. 
            Hashing functions have certain characteristics that make them desirable in the Blockchain field, which includes:
            a. They are one way functions:
                It is easy to compute a hash given an input but it is impossible to calculate the input given a hash. 
            b. Given the same input, the same exact hash will be generated everytime given that we are using the same hash function. 
            c. It is impossible to find distinct inputs that yield the same hash. 

        + Importance of hashing:
            Blockchain relies heavily on hashing. The idea is that in a Blockchain, we have an ordered chain of blocks such that each block contains the following 
            information:
            a. Hash of the previous block 
            b. List of transactions
            c. Hash of itself 

            --> Example:
                - Consider the following simple block: [0, {X -> $100 -> Y}, 91b452]
                    . Since this is the first block of the Blockchain, the hash of the previous block is 0.
                    . There is only 1 transaction in the list of transactions 
                    . The final block is the hash of the following block
                    . A block where the hash of the previous block is 0 is termed as a Genesis Block. In other words, a genesis block is basically the very first 
                      block in a Blockchain. 

                - Suppose we want to add some more blocks to this blockchain (i.e, we want to persist more transactions taking place on the blockchain) and let that block 
                  be as folows: [91b452, {Y -> $20 -> Z, x -> $10 -> P}, 8ab32k]
                    . 91b452 is the hash of the previous block 
                    . There are 2 transactions in the list of transactions 
                    . 8ab32k is the hash of the new block 

            --> Visualisation:
                The previous example can be visualised as a linkedlist where each node contains the infomation previously discussed and links itself to the next node. 

            The reason hashing is important is that without it the blockchain would not be as secure as it is now, which might affect its attractiveness and usecases. For 
            instance, if the blockchain did not have the same level of security as it actually does, then people would not feel safe relying on it to hold their transactions 
            and carry sensitive information. But this security does not only come from the fact that a carefully desiged one way function is put in place, but also relies on another 
            factor which is the data-structure being used and the way the data has been placed within the data-structure. The segment below will explain more about this. 

            --> What is so special about this "data structure"?
                The special thing about this data structure is the extra level of security that it adds to the blockchain; The idea is that if someone were to mutilate the chain 
                by altering a transaction in any block, then the hash value of that block will change which will affect all subsequent blocks. 

        + Hashing Formula:
            hash = hash_function(list of transactions, hash of the previous block);

        + Merkle Tree:
            Merkle Trees are data structures that are also known as "Binary Hash Trees" that serve to encode a block's data more efficienctly and securely. 
            
            --> Encoding Process:
                The way Merkle Trees encode data is by starting with the leaves, the nodes the very bottom of the tree, which are usually the transactions in plain text. After grouping all the transactions 
                and placing them at the bottom of the tree, the algorithm starts hashing each transaction individually. If there was an odd number of transactions in a block, then the last transaction is doubled 
                and each will be hashed seperately. Following this step, the algorithm starts grouping the first level of hashes in pairs and hashing them. This process is repeated until there is only one hash 
                left sitting at the top of the tree, the root hash. 


    * Blocks:
        + What is a block in a Blockchain?
            Blocks are data structures within the blockchain database, where transaction data are permanently recorded. A block records some or all transactions that have not yet 
            been validated by the network. Once all the transactions in the block get validated, the block can be marked as closed and a new block is created for storing and validating 
            new transactions taking place on the blockchain.

        + How does a block work in a Blockchain?
            A block stores information which includes:
            a. A magic number:
                A number containing specific values that indicate that this block belongs to a particular network 
            b. Blocksize:
                A number that indicate the maximum number of bits this block could store 
            c. Block header:
                Contains information about the block 
            d. Transaction counter :
                Stores the amount of transactions that are currently in the block 
            e. Transactions:
                Keeps a record of all the transactions that took place on the network but have not yet been validated 

            The largest element is the transactions element as it contains the most amount of information. This is followed by the block header which includes additional 
            information such as:
            a. Version:
                The version of the cryptocurrency being used
            b. Previous block hash:
                Contains the hash of the previous block's header 
            c. Hash Merkle root:
                Hash of transactions in the Merkle tree of the current block 
            d. Time:
                A timestamp to place the block in the chain 
            e. Bits:
                The difficulty rating of the target hash. In other words, this is an indicator of how difficult it is to solve the nonce
            f. Nonce:  
                The encrypted number that the miner needs to solve to verify the block and close it 

    * Mining:
        + What is mining?
            A lot of people think that mining is the process of searching for bitcoin over the internet. However, mining is the process of solving a complex mathematical process 
            with the aim of verifying the block at hand with the incentive to gain financial rewards. This complex mathematical process does not involve super hard and computationally 
            expensive calculations as one might expect, but requires generating a relatively large number of hashes until the correct or a relatively close hash gets generated by one 
            of the many miners on the network. 

        + What is the role of miners?
            Miners are the ones whom validate a block on the network. All miners tend to compete against one another to be the first to validate the block on the chain. A miner has a 
            higher chance of validating the block if they have a more powerful system that is capable to generating a large number of hashes in a small period of time. 

        + An analogy:
            To better understand the idea of mining and how it works on a blockchain, let me provide you with an example:
            I choose a number between 1 and 1000 and write this number down and seal it in an envelop. I then ask 3 people to try and guess the number that I have written down but
            I inform them that they do not need to guess the exact number (i.e, they can guess anything lower than or equal to the number I wrote down) and they have an unlimited 
            number of guesses. Let us say that the number I was thinking of was 99. If person A 999 then they lose as 999 > 99. If friend B guesses 98 and friend C guesses 20, then 
            they both theoretically won as 98 < 99 and 20 < 99 and friend B does not gain extra credit for being closer to the correct answer. 

            If we were to take the example above and apply it to the blockchain community, cryptocurrencies to be specific, then we would be asking millions of users to take a guess and 
            the number I would be thinking of would be a 64-digit hexadecimal number. It would therefore be really difficult to guess the right answer.   

    * RSA Key Generation:
        + Wallet creation:
            When a client creates a wallet on the blockchain system, they are given a public and a private key that could be used for authentication and authorization purposes and an 
            address. The generation of an address begins with the generation of a private key. The generation of the public key is done using a known algorithm which will be discussed 
            in later segments. Following the generation of the client's public and private keys, the address can be easily generated as it is a shorter respresentative form of the public 
            address. 

        + 